#Область ОписаниеПеременных

&НаКлиенте
Перем НомерУстройства, СоединениеИПараметры;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СканШтрихкода"
		И (НомерУстройства = Источник ИЛИ Источник = ЭтаФорма)
		И ВводДоступен() Тогда
		
		//ШтрихкодПоиск = Параметр;
		ОбработатьШтрихкод(Параметр); //процедура для обработки ШК
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если КомпонентыДляСчитыванияШтрихкодов <> Неопределено Тогда
		КомпонентыДляСчитыванияШтрихкодов.Подключить(НомерУстройства);
	КонецЕсли;
	
	НастройкиСоединения = ПолучитьНастройкиСоединения();
	СоединениеИПараметры = ОбменДаннымиКлиентСервер.ПолучитьСоединениеИПараметры(НастройкиСоединения);
	
	ОбновитьСписки();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если КомпонентыДляСчитыванияШтрихкодов <> Неопределено Тогда
		КомпонентыДляСчитыванияШтрихкодов.Отключить(НомерУстройства);
	КонецЕсли;
	СоединениеИПараметры = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задан пользователь!";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("Штрихкоды", Новый Соответствие);
	КэшированныеЗначения.Вставить("ЯчейкиНоменклатуры", Новый Соответствие);
	КэшированныеЗначения.Вставить("ТекущийЭтап", "");
	КэшированныеЗначения.Вставить("ПоказатьДетали", Ложь);
	КэшированныеЗначения.Вставить("МожноЗакрыть", Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Отказ = НЕ КэшированныеЗначения.МожноЗакрыть;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШтрихкодПоискПриИзменении(Элемент)
	ОбработатьШтрихкод(ШтрихкодПоиск);
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаПриИзменении(Элемент)
	ОбновитьСписки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОстаткиПоЯчейкам

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЯчейкиОтбора

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод);
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеШтрихкода = ПолучитьДанныеШтрихкодаСервер(Штрихкод, КэшированныеЗначения);
	
	ТипЗнчДанныеШтрихкода = ТипЗнч(ДанныеШтрихкода);
	
	Если ТипЗнчДанныеШтрихкода = Тип("Структура") Тогда
		
		СтруктураНоменклатуры = Новый Структура("Номенклатура, Упаковка", ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Упаковка);
		НайденныеСтроки = Остаток.НайтиСтроки(СтруктураНоменклатуры);
		Если НайденныеСтроки.Количество() <> 0 Тогда
	    	СтруктураСтроки = Новый Структура("Номенклатура, Серия, Упаковка, Количество");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, НайденныеСтроки[0]);
			ПоложитьВКонтейнер(СтруктураСтроки);
			ОбновитьСписки();
		Иначе 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нет " + ДанныеШтрихкода.Номенклатура + ", " + ДанныеШтрихкода.Упаковка + " на остатках!";
			Сообщение.Сообщить();
		КонецЕсли;			
					
	Иначе		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Штрихкод не найден!";
		Сообщение.Сообщить();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиСоединения()
	Возврат ОбменДаннымиСервер.ПолучитьНастройкиСоединения();	
КонецФункции

&НаКлиенте
Процедура ПолучитьОстатки(ЯчейкаСортировки)
	
	Если ЗначениеЗаполнено(ЯчейкаСортировки) Тогда
		АдресРесурсаСПараметрами = СоединениеИПараметры.Параметры.АдресРесурса + "/sort?type=balanceСell&cell=" + СокрЛП(ЯчейкаСортировки.УникальныйИдентификатор());
	Иначе
		АдресРесурсаСПараметрами = СоединениеИПараметры.Параметры.АдресРесурса + "/sort?type=balanceUser&user=" + СокрЛП(ТекущийПользователь.УникальныйИдентификатор());
	КонецЕсли;
	
	СтруктураОтвета = ОбменДаннымиКлиентСервер.ПолучитьОтвет(СоединениеИПараметры, АдресРесурсаСПараметрами, "GET",, Истина, "Серия");
	//СтруктураОтвета = ОбменДаннымиКлиентСервер.ПолучитьОтвет(СоединениеИПараметры, АдресРесурсаСПараметрами, "GET",, Истина);
	Если СтруктураОтвета <> Неопределено И СтруктураОтвета.error Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтруктураОтвета.text;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.data = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОстаткиСервер(СтруктураОтвета);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОстаткиСервер(СтруктураОтвета)
	
	Если СтруктураОтвета.Свойство("cell") Тогда
		Ячейка = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(СтруктураОтвета.cell, "Ячейки");
	КонецЕсли;
	Если СтруктураОтвета.Свойство("sorter") Тогда
		Ячейка = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(СтруктураОтвета.sorter, "ФизическиеЛица");
	КонецЕсли;
	
	Остаток.Очистить();
	Для Каждого ТекЭл Из СтруктураОтвета.data Цикл
		СтрокаТаблицы = Остаток.Добавить();
		СтрокаТаблицы.Номенклатура = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(ТекЭл.Номенклатура, "Номенклатура");
		СтрокаТаблицы.Упаковка = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(ТекЭл.Упаковка, "Упаковки");
		СтрокаТаблицы.Серия = ТекЭл.Серия;
		СтрокаТаблицы.Количество = ТекЭл.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКонтейнеры()
	
	АдресРесурсаСПараметрами = СоединениеИПараметры.Параметры.АдресРесурса + "/sort?type=container";
	СтруктураОтвета = ОбменДаннымиКлиентСервер.ПолучитьОтвет(СоединениеИПараметры, АдресРесурсаСПараметрами, "GET",, Истина, "Серия");
	//СтруктураОтвета = ОбменДаннымиКлиентСервер.ПолучитьОтвет(СоединениеИПараметры, АдресРесурсаСПараметрами, "GET",, Истина);
	Если СтруктураОтвета <> Неопределено И СтруктураОтвета.error Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтруктураОтвета.text;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.data = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьКонтейнерыСервер(СтруктураОтвета);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКонтейнерыСервер(СтруктураОтвета)
	
	ЭлементыКонтейнера = КонтейнерСортировки.ПолучитьЭлементы();
	ЭлементыКонтейнера.Очистить();
	Для Каждого ТекЭл Из СтруктураОтвета.data Цикл
		СтрокаТаблицы = ЭлементыКонтейнера.Добавить();
		СтрокаТаблицы.ВЯчейку = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(ТекЭл.Ячейка, "Ячейки");
		СтрокаТаблицы.НаправлениеРазмещения = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(ТекЭл.НаправлениеРазмещения, "СФ_НаправленияРазмещенияТоваров");
		
		Если ТекЭл.Строки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		ЭлементыПодчиненные = СтрокаТаблицы.ПолучитьЭлементы();
		Для Каждого ТекПодЭл Из ТекЭл.Строки Цикл
			СтрокаПодчиненная = ЭлементыПодчиненные.Добавить();
			СтрокаПодчиненная.Номенклатура = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(ТекПодЭл.Номенклатура, "Номенклатура");
			СтрокаПодчиненная.Упаковка = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(ТекПодЭл.Упаковка, "Упаковки");
			СтрокаПодчиненная.Серия = ТекПодЭл.Серия;
			СтрокаПодчиненная.ИзЯчейки = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(ТекПодЭл.ИзЯчейки, "Ячейки");
			СтрокаПодчиненная.ВЯчейку = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(ТекПодЭл.ВЯчейку, "Ячейки");
			СтрокаПодчиненная.Сортировщик = ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(ТекПодЭл.Сортировщик, "ФизическиеЛица");
			СтрокаПодчиненная.Количество = ТекПодЭл.Количество;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВКонтейнер(СтруктураСтроки)
	
	АдресРесурсаСПараметрами = СоединениеИПараметры.Параметры.АдресРесурса + "/sort?type=container";
	
	СтруктураСтроки.Вставить("ЯчейкаСортируемая", Ячейка);
	СтруктураСтроки.Вставить("Сортировщик", Сортировщик);	
	
	ТелоЗапроса = ЗаписатьJSONВСтроку(СтруктураСтроки);
	
	СтруктураОтвета = ОбменДаннымиКлиентСервер.ПолучитьОтвет(СоединениеИПараметры, АдресРесурсаСПараметрами, "PUT", ТелоЗапроса, Истина);
	
	Если СтруктураОтвета <> Неопределено И СтруктураОтвета.error Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтруктураОтвета.text;
		Сообщение.Сообщить();
		Направление = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.data = Неопределено Тогда
		Направление = Неопределено;
		Возврат;
	КонецЕсли;
	
	Направление = ПоложитьВКонтейнерСервер(СтруктураОтвета);;

КонецПроцедуры

&НаСервере
Функция ЗаписатьJSONВСтроку(Данные)	
	Возврат  ОбменДаннымиСервер.ЗаписатьJSONВСтроку(Данные);
КонецФункции

&НаСервере
Функция ПоложитьВКонтейнерСервер(СтруктураОтвета)
	
	Возврат ОбменДаннымиСервер.ПолучитьСоздатьОбновитьСсылку(СтруктураОтвета.data, "СФ_НаправленияРазмещенияТоваров");

КонецФункции

&НаСервере
Функция ПолучитьДанныеШтрихкодаСервер(Штрихкод, КэшированныеЗначения)
	
	РегистрыСведений.Сканирования.ЗарегистрироватьВводШтрихкода(Штрихкод);

	ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды.Получить(Штрихкод);
	
	Если ДанныеШтрихкода = Неопределено Тогда 
		ДанныеШтрихкода = Штрихкодирование.ПолучитьДанныеПоШтрихкоду(Штрихкод, КэшированныеЗначения);
	КонецЕсли;
	
	Возврат ДанныеШтрихкода;
КонецФункции

&НаКлиенте
Функция ОбновитьСписки()
	ПолучитьОстатки(Ячейка);	
	ПолучитьКонтейнеры();
КонецФункции

&НаКлиенте
Процедура СоздатьПеремещение(Команда)
	АдресРесурсаСПараметрами = СоединениеИПараметры.Параметры.АдресРесурса + "/sort?type=createMove&cell=" + СокрЛП(Ячейка.УникальныйИдентификатор());
	СтруктураОтвета = ОбменДаннымиКлиентСервер.ПолучитьОтвет(СоединениеИПараметры, АдресРесурсаСПараметрами, "GET",, Истина);
	Если СтруктураОтвета <> Неопределено И СтруктураОтвета.error Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтруктураОтвета.text;
		Сообщение.Сообщить();
	КонецЕсли;
	ОбновитьСписки();
КонецПроцедуры

#КонецОбласти
