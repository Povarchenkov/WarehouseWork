
#Область ОписаниеПеременных

&НаКлиенте
Перем НомерУстройства, СоединениеИПараметры;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//Для Каждого ТекСтрока Из ТекущийОбъект.ТоварыОтбор Цикл
	//	ТекСтрока.КоличествоОтобрано = 0;		
	//КонецЦикла;
	//Для Каждого ТекСтрока Из ТекущийОбъект.ТоварыРазмещение Цикл
	//	ТекСтрока.КоличествоРазмещено = 0;		
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СканШтрихкода"
		И (НомерУстройства = Источник ИЛИ Источник = ЭтаФорма)
		И ВводДоступен() Тогда
		
		ШтрихкодПоиск = Параметр;
		ОбработатьШтрихкод(Параметр); //процедура для обработки ШК
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если КомпонентыДляСчитыванияШтрихкодов <> Неопределено Тогда
		КомпонентыДляСчитыванияШтрихкодов.Подключить(НомерУстройства);
	КонецЕсли;
	
	НастройкиСоединения = ПолучитьНастройкиСоединения();
	СоединениеИПараметры = ОбменДаннымиКлиентСервер.ПолучитьСоединениеИПараметры(НастройкиСоединения);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если КомпонентыДляСчитыванияШтрихкодов <> Неопределено Тогда
		КомпонентыДляСчитыванияШтрихкодов.Отключить(НомерУстройства);
	КонецЕсли;
	СоединениеИПараметры = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("Штрихкоды", Новый Соответствие);
	КэшированныеЗначения.Вставить("ТекущийЭтап", "");
	КэшированныеЗначения.Вставить("МожноЗакрыть", Ложь);
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВРаботе");
	
	НастройкиПриСоздании(Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Отказ = НЕ КэшированныеЗначения.МожноЗакрыть;		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.Свойство("ВременнаяЗапись")
		И ПараметрыЗаписи.ВременнаяЗапись Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТекущийЭтап = "Отбор" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаканчитьОтборЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Закончить отбор?", РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ КэшированныеЗначения.МожноЗакрыть Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПередЗаписьюЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Закончить размещение?", РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет);
		Отказ = Истина;
		Возврат
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПараметрыЗаписи.Свойство("ВременнаяЗапись")
		И ПараметрыЗаписи.ВременнаяЗапись Тогда
		
		Возврат;
	КонецЕсли;	
	
	ТаблицаПроверки = Новый ТаблицаЗначений;
	ТаблицаПроверки.Колонки.Добавить("Номенклатура");
	ТаблицаПроверки.Колонки.Добавить("Упаковка");
	ТаблицаПроверки.Колонки.Добавить("Количество");
	ТаблицаПроверки.Колонки.Добавить("КоличествоВыполнено");
	
	ЕстьОшибки = Ложь;
	СтрокаОшибки = "";
	
	Для Каждого СтрТабл из ТекущийОбъект.ТоварыРазмещение Цикл
		
		// Добавить запись в таблицу проверки.
		НоваяСтрока = ТаблицаПроверки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
		НоваяСтрока.Количество = СтрТабл.Количество;
		НоваяСтрока.КоличествоВыполнено = СтрТабл.КоличествоРазмещено;
		
		Разница = СтрТабл.Количество - СтрТабл.КоличествоРазмещено;
		Если Разница <> 0 Тогда
			СтрокаОшибки = СтрокаОшибки + "
				|Для " + СтрТабл.Номенклатура + " размещено " + ?(Разница > 0, "больше", "меньше") + ", чем нужно.";
			
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрТабл из ТекущийОбъект.ТоварыОтбор Цикл
		
		// Добавить запись в таблицу проверки.
		НоваяСтрока = ТаблицаПроверки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
		НоваяСтрока.Количество = -СтрТабл.Количество;
		НоваяСтрока.КоличествоВыполнено = -СтрТабл.КоличествоОтобрано;
		
		Разница = СтрТабл.Количество - СтрТабл.КоличествоОтобрано;
		Если Разница <> 0 Тогда
			СтрокаОшибки = СтрокаОшибки + "
				|Для " + СтрТабл.Номенклатура + " отобрано " + ?(Разница > 0, "больше", "меньше") + ", чем нужно.";
			
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПроверки.Свернуть("Номенклатура, Упаковка", "Количество, КоличествоВыполнено");
	
	Для Каждого ТекСтрока Из ТаблицаПроверки Цикл
		Если ТекСтрока.КоличествоВыполнено <> 0 Тогда
			СтрокаОшибки = СтрокаОшибки + "
				|Для " + ТекСтрока.Номенклатура + " размещено " + ?(ТекСтрока.КоличествоВыполнено > 0, "больше", "меньше") + " чем отобрано.";
			
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекущийОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками");
	Иначе
		ТекущийОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок");
	КонецЕсли;		
	ТекущийОбъект.Комментарий = "Загрузка из ТСД!" + Символы.ПС + Символы.ВК + ТекущийОбъект.Комментарий + СтрокаОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ПараметрыЗаписи.Свойство("ВременнаяЗапись")
		И ПараметрыЗаписи.ВременнаяЗапись Тогда
		
		Возврат;
	КонецЕсли;
	
	АдресРесурсаСПараметрами = СоединениеИПараметры.Параметры.АдресРесурса + "/task";
	
	СтруктураОтвета = ОбменДаннымиКлиентСервер.ПолучитьОтвет(СоединениеИПараметры, АдресРесурсаСПараметрами, "PUT", СтруктураДокумента(Объект.Ссылка));
	
	Если СтруктураОтвета <> Неопределено И СтруктураОтвета.error Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтруктураОтвета.text;
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеШтрихкода = ПолучитьДанныеШтрихкодаСервер(Штрихкод, КэшированныеЗначения);
	
	ТипЗнчДанныеШтрихкода = ТипЗнч(ДанныеШтрихкода);
	
	Если ТипЗнчДанныеШтрихкода = Тип("Структура") Тогда
	
		ОтобратьДанныеВТаблице(Новый Структура("Номенклатура", ДанныеШтрихкода.Номенклатура), Истина);				
			
	ИначеЕсли ТипЗнчДанныеШтрихкода = Тип("СправочникСсылка.Ячейки") Тогда
	
		ОтобратьДанныеВТаблице(Новый Структура("Ячейка", ДанныеШтрихкода), Истина)
		
	Иначе 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Штрихкод не найден!";
		Сообщение.Сообщить();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	СинхронизироватьДанныеСТаблицей();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТоварыВыборЕдиничнойЗадачи("ТоварыОтбор", ВыбраннаяСтрока, "Отобрано");	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмещениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТоварыВыборЕдиничнойЗадачи("ТоварыРазмещение", ВыбраннаяСтрока, "Размещено");	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбновитьДанныеВТаблице(Объект.ТоварыОтбор, ВыбранноеЗначение, "Отобрано");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмещениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбновитьДанныеВТаблице(Объект.ТоварыРазмещение, ВыбранноеЗначение, "Размещено");
КонецПроцедуры

&НаКлиенте
Процедура СписокЯчеекОтбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокЯчеекВыбор("ЯчейкиОтбора", ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СписокЯчеекРазмещенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокЯчеекВыбор("ЯчейкиРазмещения", ВыбраннаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СброситьНоменклатуру(Команда)
	Номенклатура = Неопределено;
	ПредыдущаяНоменклатура = Неопределено;
	Ячейка = Неопределено;
	КоличествоРазмещено = 0;
	
	ОтобратьДанныеВТаблице(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	ОтобратьДанныеВТаблице(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ШтрихкодПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ОбработатьШтрихкодПриИзменении", 0.1, Истина);		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодПриИзменении()
	ОбработатьШтрихкод(ШтрихкодПоиск);	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьДанныеСТаблицей(ИзТаблицы = Ложь)
	//Если Не ЗначениеЗаполнено(Номенклатура) Или Не ЗначениеЗаполнено(Ячейка) Тогда
	//	Возврат;
	//КонецЕсли; 
	//
	//НайденнаяСтрока = Неопределено;	
	//Для каждого СтрокаТаблицы Из Объект[ТекущееИмяТЧ] Цикл	
	//	Если СтрокаТаблицы.Номенклатура = Номенклатура
	//		И СтрокаТаблицы.Ячейка = Ячейка Тогда
	//	
	//		НайденнаяСтрока = СтрокаТаблицы;
	//		Прервать;		
	//	КонецЕсли;	
	//КонецЦикла;
	//
	//Если НайденнаяСтрока = Неопределено Тогда		
	//	Если Не ИзТаблицы И КоличествоРазмещено = 0 Тогда 
	//		Возврат;
	//	КонецЕсли;		
	//	НайденнаяСтрока = Объект[ТекущееИмяТЧ].Добавить();
	//	НайденнаяСтрока.Номенклатура = Номенклатура;
	//	НайденнаяСтрока.Упаковка = Упаковка;
	//	НайденнаяСтрока.Ячейка = Ячейка;		
	//КонецЕсли;
	//
	//ПолеКоличествоРазмещено = ?(ТекущееИмяТЧ = "ТоварыОтбор", "КоличествоОтобрано", "КоличествоРазмещено");
	//
	//Если ИзТаблицы Тогда		
	//	КоличествоРазмещено = НайденнаяСтрока[ПолеКоличествоРазмещено];
	//	Количество = НайденнаяСтрока.Количество;
	//Иначе		
	//	НайденнаяСтрока[ПолеКоличествоРазмещено] = КоличествоРазмещено;
	//	Записать(Новый Структура("ВременнаяЗапись", Истина));
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеШтрихкодаСервер(Штрихкод, КэшированныеЗначения)
	
	РегистрыСведений.Сканирования.ЗарегистрироватьВводШтрихкода(Штрихкод);

	ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды.Получить(Штрихкод);
	
	Если ДанныеШтрихкода = Неопределено Тогда 
		ДанныеШтрихкода = Штрихкодирование.ПолучитьДанныеПоШтрихкоду(Штрихкод, КэшированныеЗначения);
	КонецЕсли;
	
	Возврат ДанныеШтрихкода;
КонецФункции

&НаСервере
Функция ПолучитьНастройкиСоединения()
	Возврат ОбменДаннымиСервер.ПолучитьНастройкиСоединения();	
КонецФункции

&НаКлиенте
Процедура ОтобратьДанныеВТаблице(СтруктураОтбора, ДобавитьКОтбору = Ложь)
	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		Если ДобавитьКОтбору Тогда
			ОтборСтрок = Новый Структура(Элементы[ТекущееИмяТЧ].ОтборСтрок);
			Для Каждого ТекПоле Из СтруктураОтбора Цикл
				ОтборСтрок.Вставить(ТекПоле.Ключ, ТекПоле.Значение);		
			КонецЦикла;		
		Иначе 
			ОтборСтрок = СтруктураОтбора;			
		КонецЕсли;
		ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	Иначе 	
		ОтборСтрок = Неопределено;		
	КонецЕсли;	
	
	Элементы[ТекущееИмяТЧ].ОтборСтрок = ОтборСтрок;
КонецПроцедуры

&НаСервере
Функция СтруктураИзменениеСтатуса(Статус)
	Возврат ОбменДаннымиСервер.ЗаписатьJSONВСтроку(Новый Структура("Статус", Статус));			
КонецФункции

&НаКлиенте
Функция НайтиЯчейкуВРазмещении(Номенклатура)
	ЯчейкаНайденная = Неопределено;
	Остаток = -1;
	Для Каждого ТекСтрока Из Объект.ТоварыРазмещение Цикл 
		Если ТекСтрока.Номенклатура = Номенклатура
			И Остаток < ТекСтрока.Количество - ТекСтрока.КоличествоРазмещено Тогда
			
			ЯчейкаНайденная = ТекСтрока.Ячейка;			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЯчейкаНайденная;
КонецФункции

&НаСервере
Функция СтруктураДокумента(Документ)
	Возврат ОбменДаннымиСервер.ЗаписатьJSONВСтроку(Документ);			
КонецФункции

&НаСервере
Процедура ПерезаполнитьКоличествоШтук()
	ТоварыОтборКоличествоШтукВсего = 0;
	Для Каждого ТекСтрока Из Объект.ТоварыОтбор Цикл 
		ТекСтрока.КоличествоШтук = ТекСтрока.Количество * ?(ТекСтрока.Упаковка.Знаменатель = 0, 1, ТекСтрока.Упаковка.Числитель/ТекСтрока.Упаковка.Знаменатель);	
		ТоварыОтборКоличествоШтукВсего = ТоварыОтборКоличествоШтукВсего + ТекСтрока.КоличествоШтук;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаписьюЗавершение(Ответ, ДопПарметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КэшированныеЗначения.МожноЗакрыть = Истина;
		Записать();
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаканчитьОтборЗавершение(Ответ, ДопПарметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьРазмещение();
		Записать(Новый Структура("ВременнаяЗапись", Истина));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастройкиПриСоздании(Отказ) Экспорт
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Перемещение") Тогда
		ТекущийЭтап = "Отбор";
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТоварыОтбор;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Отбор") Тогда
		ТекущийЭтап = "Отбор";
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТоварыОтбор;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Размещение") Тогда
		ТекущийЭтап = "Размещение";
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТоварыРазмещение;
	Иначе 
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не определен тип документа!";
		Сообщение.Сообщить();
		Возврат
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.ТоварыОтбор Цикл
		Если ЯчейкиОтбора.НайтиПоЗначению(ТекСтрока.Ячейка) = Неопределено Тогда
			ЯчейкиОтбора.Добавить(ТекСтрока.Ячейка);	
		КонецЕсли;
		Если СписокНоменклатурыКОтбору.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
			СписокНоменклатурыКОтбору.Добавить(ТекСтрока.Номенклатура);	
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.ТоварыРазмещение Цикл
		Если ЯчейкиРазмещения.НайтиПоЗначению(ТекСтрока.Ячейка) = Неопределено Тогда
			ЯчейкиРазмещения.Добавить(ТекСтрока.Ячейка);	
		КонецЕсли;
		Если СписокНоменклатурыКРазмещению.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
			СписокНоменклатурыКРазмещению.Добавить(ТекСтрока.Номенклатура);	
		КонецЕсли;
	КонецЦикла;
	ПерезаполнитьКоличествоШтук();
	
	ТекущееИмяТЧ = СтрЗаменить(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя, "Группа", "");	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВТаблице(Таблица, НовыеДанные, СуффиксКолво)
	
	ДанныеСтроки = Таблица.НайтиПоИдентификатору(НовыеДанные.ИдентификаторЗадачи);	
	
	Если ДанныеСтроки.Упаковка <> НовыеДанные.Упаковка
		ИЛИ ДанныеСтроки.Ячейка <> НовыеДанные.Ячейка Тогда
		
		ДанныеСтроки = Таблица.Добавить();		
	КонецЕсли;

	ДанныеСтроки.Номенклатура = НовыеДанные.Номенклатура;
	ДанныеСтроки.Упаковка = НовыеДанные.Упаковка;
	ДанныеСтроки.Ячейка = НовыеДанные.Ячейка;
	ДанныеСтроки.Количество = НовыеДанные.Количество;
	ДанныеСтроки["Количество" + СуффиксКолво] = НовыеДанные.КоличествоОбработано;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыЕдиничнойЗадачи(Результат, ДопПараметры) Экспорт
	Если КомпонентыДляСчитыванияШтрихкодов <> Неопределено Тогда
		КомпонентыДляСчитыванияШтрихкодов.Подключить(НомерУстройства);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура НачатьРазмещение()
	АдресРесурсаСПараметрами = СоединениеИПараметры.Параметры.АдресРесурса + "/task?taskID=" + СокрЛП(Объект.Ссылка.УникальныйИдентификатор());
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.СФ_Размещается");
	
	СтруктураОтвета = ОбменДаннымиКлиентСервер.ПолучитьОтвет(СоединениеИПараметры, АдресРесурсаСПараметрами, "PATCH", СтруктураИзменениеСтатуса(Объект.Статус));
	
	Если СтруктураОтвета <> Неопределено И СтруктураОтвета.error Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтруктураОтвета.text;
		Сообщение.Сообщить();
	КонецЕсли;
	
	ТекущийЭтап = "Размещение";
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТоварыРазмещение;
	ТекущееИмяТЧ = СтрЗаменить(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя, "Группа", "");	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЕдиничнойЗадачи(ИмяТаблицы, Идентификатор, СуффиксКолво)	
	ДанныеСтроки = Объект[ИмяТаблицы].НайтиПоИдентификатору(Идентификатор);
	
	РеквизитыФормы = Новый Структура();
	РеквизитыФормы.Вставить("ИдентификаторЗадачи", Идентификатор);
	РеквизитыФормы.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	РеквизитыФормы.Вставить("Упаковка", ДанныеСтроки.Упаковка);
	РеквизитыФормы.Вставить("Ячейка", ДанныеСтроки.Ячейка);
	РеквизитыФормы.Вставить("Количество", ДанныеСтроки.Количество);
	РеквизитыФормы.Вставить("КоличествоОбработано", ДанныеСтроки["Количество" + СуффиксКолво]);
	
	ПараметрыФормы = Новый Структура("ДанныеЗаполнения", РеквизитыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытиеФормыЕдиничнойЗадачи", ЭтаФорма);	
	ОткрытьФорму("Обработка.РаботаСТСД.Форма.ФормаЕдиничнойЗадачи", ПараметрыФормы, Элементы[ИмяТаблицы],,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СписокЯчеекВыбор(ИмяТаблицы, ВыбраннаяСтрока)
	СтрокаСписка = ЭтотОбъект[ИмяТаблицы].НайтиПоИдентификатору(ВыбраннаяСтрока); 
	ОтобратьДанныеВТаблице(Новый Структура("Ячейка", СтрокаСписка.Значение), Истина);
	
	Элементы["ГруппаДетали" + ТекущееИмяТЧ].ТекущаяСтраница = Элементы["ГруппаСтраницаТЧ" + ТекущееИмяТЧ];
КонецПроцедуры

#КонецОбласти
